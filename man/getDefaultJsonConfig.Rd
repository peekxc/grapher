% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R
\name{getDefaultJsonConfig}
\alias{getDefaultJsonConfig}
\title{Creates a default JSON configuration}
\usage{
getDefaultJsonConfig(network = NULL)
}
\arguments{
\item{network}{An adjacency matrix. See details.}
}
\description{
Exports a network into a JSON object suitable for visualization with the grapher library.
}
\details{
The 'grapher.js' library uses a D3-like network representation with the following format:
(network) : {
  nodes: [{ x: 0, y: 0, r: 20, color: (swatch or hex/rgb), ... }, ... ],
  links: [{ from: 0, to: 1, color: (swatch or hex/rgb), ... }, ... ]
}
Thus, a valid JSON configuration includes minimal set information needed to create a grapher network.
This function returns a list with the following members:
\code{nodes} := a data.frame w/ members 'x', 'y', 'r', and optionally 'color'
\code{edges} := a data.frame w/ members 'from', 'to', and optionally 'color'
If customization is needed the JSON network object sent to the grapher htmlwidgets, these values can be changed
directly before passing to grapher. This may be useful in the situation where additional data is associated with 
the network is needed on the JavaScript end, i.e. extra node or edge attributes. Alternatively, 


Note that if one is using shiny, this method only needs to be called once. Subsequent API calls use the shiny reactive context 
to update the values of the network on the JS side directly, as opposed to regenerating the JSON configuration on the R side.
}
